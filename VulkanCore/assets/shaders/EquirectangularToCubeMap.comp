#version 460 core

layout(binding = 0, rgba32f) writeonly uniform imageCube o_CubeMap;
layout(binding = 1) uniform sampler2D u_EquirectangularTex;

const vec2 invAtan = vec2(0.1591, 0.3183);
vec2 SampleSphericalMap(vec3 v)
{
	vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
	uv *= invAtan;
	uv += 0.5;
	return uv;
}

vec3 CubeCoordToWorld(vec2 uv, uint side)
{
    const vec2 texCoords = uv * 2.0 - 1.0;

    switch (side)
    {
        case 0: return vec3(1.0, -texCoords.yx);              // +X
        case 1: return vec3(-1.0, -texCoords.y, texCoords.x); // -X
        case 2: return vec3(texCoords.x, 1.0, texCoords.y);   // +Y
        case 3: return vec3(texCoords.x, -1.0, -texCoords.y); // -Y
        case 4: return vec3(texCoords.x, -texCoords.y, 1.0);  // +Z
        case 5: return vec3(-texCoords.xy, -1.0);             // -Z
    }
}

layout(local_size_x = 32, local_size_y = 32) in;
void main()
{
    ivec3 invocID = ivec3(gl_GlobalInvocationID);
    vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(o_CubeMap).xy);

    const vec3 localPos = -normalize(CubeCoordToWorld(uv, invocID.z));
    vec2 texCoords = SampleSphericalMap(localPos);

    vec4 color = vec4(texture(u_EquirectangularTex, texCoords).rgb, 1.0);
    color = min(color, 1000.0);

    imageStore(o_CubeMap, invocID, color);
}