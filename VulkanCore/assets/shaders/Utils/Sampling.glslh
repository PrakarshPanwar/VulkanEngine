// GLSL Header: Sampling.glslh

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float dotNH = max(dot(N, H), 0.0);
    float dotNH2 = dotNH * dotNH;

    float nom   = a2;
    float denom = (dotNH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / max(denom, 1e-5);
}

float GeometrySchlickGGX(float dotNV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;
    float nom   = dotNV;
    float denom = dotNV * (1.0 - k) + k;

    return nom / max(denom, 1e-5);
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float dotNV = max(dot(N, V), 0.0);
    float dotNL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(dotNV, roughness);
    float ggx1 = GeometrySchlickGGX(dotNL, roughness);

    return ggx1 * ggx2;
}

float GeometrySchlickSmithGGX(float dotNL, float dotNV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r * r) / 8.0;
	float GL = dotNL / (dotNL * (1.0 - k) + k);
	float GV = dotNV / (dotNV * (1.0 - k) + k);
	return GL * GV;
}

float GeometrySmithGGX(float dotNV, float alpha)
{
	float a = alpha * alpha;
	float b = dotNV * dotNV;
	return 1.0 / (dotNV + sqrt(a + b - a * b));
}

float FresnelSchlick(float cosTheta)
{
	return pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 FresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

float FresnelDielectric(float cosTheta, float eta)
{
	float sinThetaT2 = eta * eta * (1.0 - cosTheta * cosTheta);

	// Total Internal Reflection
	if (sinThetaT2 > 1.0)
		return 1.0;

	float cosThetaT = sqrt(max(1.0 - sinThetaT2, 0.0));

	float rs = (eta * cosThetaT - cosTheta) / (eta * cosThetaT + cosTheta);
	float rp = (eta * cosTheta - cosThetaT) / (eta * cosTheta + cosThetaT);

	return 0.5 * (rs * rs + rp * rp);
}

// Generalized-Trowbridge-Reitz (D)
float GTR1(float dotNH, float a)
{
	if (a >= 1.0)
		return (1.0 / PI);

	float a2 = a * a;
	float t = 1.0 + (a2 - 1.0) * dotNH * dotNH;

	return (a2 - 1.0) / (PI * log(a2) * t);
}

// Generalized-Trowbridge-Reitz (D)
// Describes Differential Area of Microfacets for the Surface Normal
float GTR2(float dotNH, float a)
{
	float a2 = a * a;
	float t = 1.0 + (a2 - 1.0) * dotNH * dotNH;
	return a2 / (PI * t * t);
}

vec3 ImportanceSampleGTR1(float roughness, float r1, float r2)
{
	float a = max(0.001, roughness);
	float a2 = a * a;

	float phi = r1 * TWO_PI;

	float cosTheta = sqrt((1.0 - pow(a2, 1.0 - r1)) / (1.0 - a2));
	float sinTheta = clamp(sqrt(1.0 - (cosTheta * cosTheta)), 0.0, 1.0);
	float sinPhi = sin(phi);
	float cosPhi = cos(phi);

	return vec3(sinTheta * cosPhi, cosTheta, sinTheta * sinPhi);
}

vec3 ImportanceSampleGTR2(float roughness, float r1, float r2)
{
	float a = max(0.001, roughness);

	float phi = r1 * TWO_PI;

	float cosTheta = sqrt((1.0 - r2) / (1.0 + (a * a - 1.0) * r2));
	float sinTheta = clamp(sqrt(1.0 - (cosTheta * cosTheta)), 0.0, 1.0);
	float sinPhi = sin(phi);
	float cosPhi = cos(phi);

	return vec3(sinTheta * cosPhi, cosTheta, sinTheta * sinPhi);
}

float GTR2Aniso(float dotNH, float dotHX, float dotHY, vec2 anisotropy)
{
    float a = dotHX / anisotropy.x;
    float b = dotHY / anisotropy.y;
    float c = a * a + b * b + dotNH * dotNH;
    return 1.0 / (PI * anisotropy.x * anisotropy.y * c * c);
}

vec3 SampleGTR2Aniso(vec2 anisotropy, float r1, float r2)
{
    float phi = r1 * TWO_PI;

    float sinPhi = anisotropy.y * sin(phi);
    float cosPhi = anisotropy.x * cos(phi);
    float tanTheta = sqrt(r2 / (1 - r2));

    return vec3(tanTheta * cosPhi, tanTheta * sinPhi, 1.0);
}

float SmithG(float dotNV, float alpha)
{
    float a = alpha * alpha;
    float b = dotNV * dotNV;
    return (2.0 * dotNV) / (dotNV + sqrt(a + b - a * b));
}

float SmithGAniso(float dotNV, float dotVX, float dotVY, vec2 anisotropy)
{
    float a = dotVX * anisotropy.x;
    float b = dotVY * anisotropy.y;
    float c = dotNV;
    return (2.0 * dotNV) / (dotNV + sqrt(a * a + b * b + c * c));
}

vec3 SampleGGXVNDF(vec3 V, vec2 anisotropy, float r1, float r2)
{
    vec3 Vh = normalize(vec3(anisotropy.x * V.x, anisotropy.y * V.y, V.z));

    float lensq = Vh.x * Vh.x + Vh.y * Vh.y;
    vec3 T1 = lensq > 0 ? vec3(-Vh.y, Vh.x, 0) * inversesqrt(lensq) : vec3(1, 0, 0);
    vec3 T2 = cross(Vh, T1);

    float r = sqrt(r1);
    float phi = 2.0 * PI * r2;
    float t1 = r * cos(phi);
    float t2 = r * sin(phi);
    float s = 0.5 * (1.0 + Vh.z);
    t2 = (1.0 - s) * sqrt(1.0 - t1 * t1) + s * t2;

    vec3 Nh = t1 * T1 + t2 * T2 + sqrt(max(0.0, 1.0 - t1 * t1 - t2 * t2)) * Vh;

    return normalize(vec3(anisotropy.x * Nh.x, anisotropy.y * Nh.y, max(0.0, Nh.z)));
}

vec3 UniformSampleSphere(inout uint seed)
{
	float r1 = RandomFloat(seed);
	float r2 = RandomFloat(seed);

	float z = 1.0 - 2.0 * r1;
	float r = sqrt(max(0.f, 1.0 - z * z));
	float phi = 2.0 * PI * r2;

	float x = r * cos(phi);
	float y = r * sin(phi);

	return vec3(x, y, z);
}

vec3 CosSampleHemisphere(inout uint seed)
{
	float r1 = RandomFloat(seed);
	float r2 = RandomFloat(seed);

	vec3 dir = vec3(0.0);
	float r = sqrt(r1);
	float phi = 2.0 * PI * r2;

	dir.x = r * cos(phi);
	dir.y = r * sin(phi);
	dir.z = sqrt(max(0.0, 1.0 - dir.x * dir.x - dir.y * dir.y));

	return dir;
}
