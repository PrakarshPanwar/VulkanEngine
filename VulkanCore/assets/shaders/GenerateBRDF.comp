#version 460 core

layout(binding = 0, rgba32f) writeonly uniform image2D o_BRDFTexture;

const float PI = 3.14159265359;
vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness * roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	
    // From Spherical coordinates to Cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // From Tangent-space vector to World-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float GeometrySchlickGGX(float dotNV, float roughness)
{
    float r = roughness;
    float k = (r * r) / 2.0;

    float nom   = dotNV;
    float denom = dotNV * (1.0 - k) + k;

    return nom / max(denom, 1e-5);
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float dotNV = max(dot(N, V), 0.0);
    float dotNL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(dotNV, roughness);
    float ggx1 = GeometrySchlickGGX(dotNL, roughness);

    return ggx1 * ggx2;
}

float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i) / float(N), RadicalInverse_VdC(i));
}

float G_Schlick_GGX(float NoV, float roughness) {
    const float k = (roughness * roughness) * 0.5;
    const float denom = NoV * (1.0 - k) + k;
    return NoV / max(denom, 1e-5);
}

float G_Smith(float NoV, float NoL, float roughness) {
    return G_Schlick_GGX(NoV, roughness) * G_Schlick_GGX(NoL, roughness);
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
    ivec2 invocID = ivec2(gl_GlobalInvocationID.xy);

    vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(o_BRDFTexture).xy);
    float dotNV = uv.x;
    float roughness = uv.y;

	vec3 V;
    V.x = sqrt(1.0 - dotNV * dotNV);
    V.y = 0.0;
    V.z = dotNV;

    float A = 0.0;
    float B = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);
    
    const uint SAMPLE_COUNT = 4096u;
    for (uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        // Generates a Sample vector that's biased towards the
        // preferred alignment direction (Importance Sampling).
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H = ImportanceSampleGGX(Xi, N, roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float dotNL = max(L.z, 0.0);
        float dotNH = max(H.z, 0.0);
        float dotVH = max(dot(V, H), 0.0);

        if (dotNL > 0.0)
        {
            float G = GeometrySmith(N, V, L, roughness);
            float G_Vis = (G * dotVH) / (dotNH * dotNV);
            float Fc = pow(1.0 - dotVH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    vec2 color = vec2(A, B) / SAMPLE_COUNT;
    imageStore(o_BRDFTexture, invocID, vec4(color, 0.0, 0.0));
}