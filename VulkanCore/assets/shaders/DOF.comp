#version 460 core

layout(binding = 0, rgba32f) restrict writeonly uniform image2D o_Image;

layout(binding = 1) uniform Camera
{
	mat4 Projection;
	mat4 View;
	mat4 InverseView;
	vec2 DepthUnpackConsts;
	vec2 CameraTanHalfFOV;
} u_Camera;

layout(binding = 2) uniform sampler2D u_InputTexture;
layout(binding = 3) uniform sampler2D u_DepthTexture;

layout(push_constant) uniform SceneData
{
	float Exposure;
	float DirtIntensity;
} u_SceneParams;

layout(binding = 4) uniform DOFData
{
	float FocusPoint;
	float FocusScale;
} u_DOF;

const float GOLDEN_ANGLE = 2.39996323;
const float MAX_BLUR_SIZE = 20.0; 
const float RAD_SCALE = 0.5; // Smaller = nicer blur, larger = faster

float LinearizeDepth(const float screenDepth)
{
	float depthLinearizeMul = u_Camera.DepthUnpackConsts.x;
	float depthLinearizeAdd = u_Camera.DepthUnpackConsts.y;
	return depthLinearizeMul / (depthLinearizeAdd - screenDepth);
}

float GetBlurSize(float depth, float focusPoint, float focusScale)
{
	float coc = clamp((1.0 / focusPoint - 1.0 / depth) * focusScale, -1.0, 1.0);
	return abs(coc) * MAX_BLUR_SIZE;
}

vec3 DepthOfField(vec2 texCoord, float focusPoint, float focusScale, vec2 texelSize)
{
	float centerDepth = LinearizeDepth(texture(u_DepthTexture, texCoord).r);
	float centerSize = GetBlurSize(centerDepth, focusPoint, focusScale);
	vec3 color = texture(u_InputTexture, texCoord).rgb;
	float tot = 1.0;
	float radius = RAD_SCALE;
	for (float ang = 0.0; radius < MAX_BLUR_SIZE; ang += GOLDEN_ANGLE)
	{
		vec2 tc = texCoord + vec2(cos(ang), sin(ang)) * texelSize * radius;
		vec3 sampleColor = texture(u_InputTexture, tc).rgb;
		float sampleDepth = LinearizeDepth(texture(u_DepthTexture, tc).r);
		float sampleSize = GetBlurSize(sampleDepth, focusPoint, focusScale);
		if (sampleDepth > centerDepth)
			sampleSize = clamp(sampleSize, 0.0, centerSize * 2.0);
		float m = smoothstep(radius - 0.5, radius + 0.5, sampleSize);
		color += mix(color / tot, sampleColor, m);
		tot += 1.0;
		radius += RAD_SCALE / radius;
	}

	return color /= tot;
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
	vec4 color = vec4(1, 0, 1, 1);
	ivec2 texSize = textureSize(u_InputTexture, 0);
	vec2 fTexSize = vec2(float(texSize.x), float(texSize.y));

	// Depth of Field
	vec2 imgSize = vec2(imageSize(o_Image));
	vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / imgSize;
	vec3 dofColor = DepthOfField(uv, u_DOF.FocusPoint, u_DOF.FocusScale, 1.0 / fTexSize);
	vec2 vuv = uv - vec2(0.5);

	vuv.x *= fTexSize.x / fTexSize.y;
    float vignette = pow(1.0 - length(vuv * vec2(1.0, 1.3)), 1.0);
    color = vec4(mix(vec4(dofColor, 1.0), vec4(dofColor, 1.0) * vignette, 0.75).rgb, 1.0);

	imageStore(o_Image, ivec2(gl_GlobalInvocationID), color);
}
