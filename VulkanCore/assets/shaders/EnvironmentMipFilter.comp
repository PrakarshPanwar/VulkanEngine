#version 460 core

layout(binding = 0, rgba32f) writeonly uniform imageCube o_CubeMap;
layout(binding = 1) uniform samplerCube u_RadianceMap;

layout(push_constant) uniform Params
{
    float Roughness;
} u_Params;

const float PI = 3.14159265359;

vec3 CubeCoordToWorld(vec2 uv, uint side)
{
    const vec2 texCoords = uv * 2.0 - 1.0;

    switch (side)
    {
        case 0: return vec3(1.0, -texCoords.yx);              // +X
        case 1: return vec3(-1.0, -texCoords.y, texCoords.x); // -X
        case 2: return vec3(texCoords.x, 1.0, texCoords.y);   // +Y
        case 3: return vec3(texCoords.x, -1.0, -texCoords.y); // -Y
        case 4: return vec3(texCoords.x, -texCoords.y, 1.0);  // +Z
        case 5: return vec3(-texCoords.xy, -1.0);             // -Z
    }
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness * roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	
    // From Spherical coordinates to Cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // From Tangent-space vector to World-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}  

float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// Normal Distribution
float DistributionGGX(float dotNH, float roughness)
{
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
    return alpha2 / (PI * denom * denom);
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i) / float(N), RadicalInverse_VdC(i));
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
	ivec3 invocID = ivec3(gl_GlobalInvocationID);

    vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(o_CubeMap).xy);
    vec3 worldPos = CubeCoordToWorld(uv, invocID.z);

    // Tangent space from Origin Point
    vec3 N = normalize(worldPos);
    // Assume View direction always equal to Outgoing direction
    vec3 R = N;
    vec3 V = N;

    float roughness = u_Params.Roughness;
    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);

    const uint SAMPLE_COUNT = 2048u;
    const float ORIGINAL_SAMPLES = 1024.0 * 1024.0;
    for (uint i = 0; i < SAMPLE_COUNT; ++i)
    {
        // Generate Sample vector towards the alignment of the Specular Lobe
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H = ImportanceSampleGGX(Xi, N, roughness);
        float dotHV = dot(H, V);
        vec3 L = normalize(2.0 * dotHV * H - V);

        float dotNL = max(dot(N, L), 0.0);
        if (dotNL > 0.0)
        {
            float dotNH = max(dot(N, H), 0.0);
            dotHV = max(dotHV, 0.0);

            // Sample from the Environment Mip Level based on Roughness/PDF
            float D = DistributionGGX(dotNH, roughness);
            float pdf = D * dotNH / (4.0 * dotHV) + 0.0001;

            float saTexel = 4.0 * PI / (6.0 * ORIGINAL_SAMPLES);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);
            float lod = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);

            prefilteredColor += textureLod(u_RadianceMap, L, lod).rgb * dotNL;
            totalWeight += dotNL;
        }
    }

    prefilteredColor = prefilteredColor / totalWeight;
    imageStore(o_CubeMap, invocID, vec4(prefilteredColor, 1.0));
}