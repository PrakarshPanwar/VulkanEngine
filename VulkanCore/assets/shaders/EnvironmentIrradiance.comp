#version 460 core

layout(binding = 0, rgba32f) writeonly uniform imageCube o_IrradianceMap;
layout(binding = 1) uniform samplerCube u_RadianceMap;

const float PI = 3.14159265359;

vec3 CubeCoordToWorld(vec2 uv, uint side)
{
    const vec2 texCoords = uv * 2.0 - 1.0;

    switch (side)
    {
        case 0: return vec3(1.0, -texCoords.yx);              // +X
        case 1: return vec3(-1.0, -texCoords.y, texCoords.x); // -X
        case 2: return vec3(texCoords.x, 1.0, texCoords.y);   // +Y
        case 3: return vec3(texCoords.x, -1.0, -texCoords.y); // -Y
        case 4: return vec3(texCoords.x, -texCoords.y, 1.0);  // +Z
        case 5: return vec3(-texCoords.xy, -1.0);             // -Z
    }
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{   
    ivec3 invocID = ivec3(gl_GlobalInvocationID);

    vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(o_IrradianceMap).xy);
    vec3 worldPos = CubeCoordToWorld(uv, invocID.z);

    // Tangent space from Origin point
    vec3 N = normalize(worldPos);
    vec3 Up = vec3(0.0, 1.0, 0.0);
    vec3 Right = normalize(cross(Up, N));
    Up = cross(N, Right);

    vec3 irradiance = vec3(0.0);

    const float TWO_PI = 2.0 * PI;
    const float HALF_PI = 0.5 * PI;
    const float DELTA_PHI = TWO_PI / 360.0;
    const float DELTA_THETA = HALF_PI / 90.0;

    float sampleCount = 0.0;
    for (float phi = 0.0; phi < TWO_PI; phi += DELTA_PHI)
    {
        float sinPhi = sin(phi);
        float cosPhi = cos(phi);
        
        for (float theta = 0.0; theta < HALF_PI; theta += DELTA_THETA)
        {
            float sinTheta = sin(theta);
            float cosTheta = cos(theta);

            // Spherical to Cartesian, in Tangent space
            vec3 sphereCoord = vec3(sinTheta * cosPhi, sinTheta * sinPhi, cosTheta);
            vec3 sampleVec = sphereCoord.x * Right + sphereCoord.y * Up + sphereCoord.z * N;

            irradiance += texture(u_RadianceMap, sampleVec).rgb * cosTheta * sinTheta;
            sampleCount++;
        }
    }

    irradiance *= PI * (1.0 / float(sampleCount));
    imageStore(o_IrradianceMap, invocID, vec4(irradiance, 1.0));
}