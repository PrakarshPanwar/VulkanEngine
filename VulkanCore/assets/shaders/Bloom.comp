#version 460 core

layout(binding = 0, rgba32f) restrict writeonly uniform image2D o_Image;

layout(binding = 1) uniform sampler2D u_Texture;
layout(binding = 2) uniform sampler2D u_BloomTexture;

layout(push_constant) uniform BloomParams
{
	vec2 LodAndMode;
	float Threshold;
	float Knee;
} u_Params;

#define BLOOM_MODE_PREFILTER      0
#define BLOOM_MODE_DOWNSAMPLE     1
#define BLOOM_MODE_UPSAMPLE_FIRST 2
#define BLOOM_MODE_UPSAMPLE       3

const float Epsilon = 1.0e-4;

vec3 DownsampleBox13(sampler2D tex, float lod, vec2 uv, vec2 texelSize)
{
	// Center
	vec3 A = textureLod(tex, uv, lod).rgb;

	texelSize *= 0.5; // Sample from center of texels

	// Inner Box
	vec3 B = textureLod(tex, uv + texelSize * vec2(-1.0, -1.0), lod).rgb;
	vec3 C = textureLod(tex, uv + texelSize * vec2(-1.0, 1.0), lod).rgb;
	vec3 D = textureLod(tex, uv + texelSize * vec2(1.0, 1.0), lod).rgb;
	vec3 E = textureLod(tex, uv + texelSize * vec2(1.0, -1.0), lod).rgb;

	// Outer Box
	vec3 F = textureLod(tex, uv + texelSize * vec2(-2.0, -2.0), lod).rgb;
	vec3 G = textureLod(tex, uv + texelSize * vec2(-2.0, 0.0), lod).rgb;
	vec3 H = textureLod(tex, uv + texelSize * vec2(0.0, 2.0), lod).rgb;
	vec3 I = textureLod(tex, uv + texelSize * vec2(2.0, 2.0), lod).rgb;
	vec3 J = textureLod(tex, uv + texelSize * vec2(2.0, 2.0), lod).rgb;
	vec3 K = textureLod(tex, uv + texelSize * vec2(2.0, 0.0), lod).rgb;
	vec3 L = textureLod(tex, uv + texelSize * vec2(-2.0, -2.0), lod).rgb;
	vec3 M = textureLod(tex, uv + texelSize * vec2(0.0, -2.0), lod).rgb;

	// Weights
	vec3 result = vec3(0.0);
	// Inner Box
	result += (B + C + D + E) * 0.5;
	// Bottom-left Box
	result += (F + G + A + M) * 0.125;
	// Top-left Box
	result += (G + H + I + A) * 0.125;
	// Top-right Box
	result += (A + I + J + K) * 0.125;
	// Bottom-right Box
	result += (M + A + K + L) * 0.125;

	result *= 0.25;

	return result;
}

vec4 QuadraticThreshold(vec4 color, float threshold, vec3 curve)
{
	// Maximum pixel brightness
	float brightness = max(max(color.r, color.g), color.b);
	// Quadratic Curve
	float rq = clamp(brightness - curve.x, 0.0, curve.y);
	rq = (rq * rq) * curve.z;
	color *= max(rq, brightness - threshold) / max(brightness, Epsilon);
	return color;
}

vec4 Prefilter(vec4 color, vec2 uv)
{
	vec3 pr = vec3(u_Params.Threshold - u_Params.Knee, u_Params.Knee * 2.0, 0.25 / u_Params.Knee);
	float clampValue = 20.0;
	color = min(vec4(clampValue), color);
	color = QuadraticThreshold(color, u_Params.Threshold, pr);
	return color;
}

vec3 UpsampleTent9(sampler2D tex, float lod, vec2 uv, vec2 texelSize, float radius)
{
	vec4 offset = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * radius;

	// Center
	vec3 result = textureLod(tex, uv, lod).rgb * 4.0;

	result += textureLod(tex, uv - offset.xy, lod).rgb;
	result += textureLod(tex, uv - offset.wy, lod).rgb * 2.0;
	result += textureLod(tex, uv - offset.zy, lod).rgb;

	result += textureLod(tex, uv + offset.zw, lod).rgb * 2.0;
	result += textureLod(tex, uv + offset.xw, lod).rgb * 2.0;

	result += textureLod(tex, uv + offset.zy, lod).rgb;
	result += textureLod(tex, uv + offset.wy, lod).rgb * 2.0;
	result += textureLod(tex, uv + offset.xy, lod).rgb;

	return result * (1.0 / 16.0);
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
	vec2 imgSize = vec2(imageSize(o_Image));
	vec2 texCoords = (gl_GlobalInvocationID.xy + vec2(0.5)) / imgSize;

	vec2 texSize = vec2(textureSize(u_Texture, int(u_Params.LodAndMode.x)));
	vec4 color = vec4(1, 0, 1, 1);
	if (uint(u_Params.LodAndMode.y) == BLOOM_MODE_PREFILTER)
	{
		color.rgb = DownsampleBox13(u_Texture, 0, texCoords, 1.0 / texSize);
		color = Prefilter(color, texCoords);
		color.a = 1.0;
	}

	else if (uint(u_Params.LodAndMode.y) == BLOOM_MODE_UPSAMPLE_FIRST)
	{
		vec2 bloomTexSize = vec2(textureSize(u_Texture, int(u_Params.LodAndMode.x + 1.0)));
		float sampleScale = 1.0;
		vec3 upsampledTexture = UpsampleTent9(u_Texture, u_Params.LodAndMode.x + 1.0, texCoords, 1.0 / bloomTexSize, sampleScale);

		vec3 existing = textureLod(u_Texture, texCoords, u_Params.LodAndMode.x).rgb;
		color.rgb = existing + upsampledTexture;
	}

	else if (uint(u_Params.LodAndMode.y) == BLOOM_MODE_UPSAMPLE)
	{
		vec2 bloomTexSize = vec2(textureSize(u_BloomTexture, int(u_Params.LodAndMode.x + 1.0)));
		float sampleScale = 1.0;
		vec3 upsampledTexture = UpsampleTent9(u_BloomTexture, u_Params.LodAndMode.x + 1.0, texCoords, 1.0 / bloomTexSize, sampleScale);

		vec3 existing = textureLod(u_Texture, texCoords, u_Params.LodAndMode.x).rgb;
		color.rgb = existing + upsampledTexture;
	}

	else if (uint(u_Params.LodAndMode.y) == BLOOM_MODE_DOWNSAMPLE)
	{
		color.rgb = DownsampleBox13(u_Texture, u_Params.LodAndMode.x, texCoords, 1.0 / texSize);
	}

	imageStore(o_Image, ivec2(gl_GlobalInvocationID), color);
}
